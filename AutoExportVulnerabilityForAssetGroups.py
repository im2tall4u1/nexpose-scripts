import requests
import json
import csv
import ast
from datetime import datetime

################ INSTANCES ####################


def get_assets_from_assetgroup(asset_group_id):
    assets_instance = 'https://nexposeURL:portNumber/api/3/asset_groups' + '' + str(asset_group_id) + 'assets'
    response = requests.Session()
    response.trust_env = False
    fetched_assets = response.get(assets_instance, auth=('*********', '*********'), verify=False)
    json_object = json.dumps(fetched_assets.text)
    dict_object = json.loads(json_object)
    assets = ast.literal_eval(dict_object)
    asset = (assets['resources'])
    return asset


def get_vulnerabilies_for_each_asset(asset_id):

    list_of_vuln = []
    v = requests.Session()
    v.trust_env = False

    asset_vulnerability_url = 'https://nexposeURL:portNumber/api/3/assets' + '' + str(asset_id) + 'vulnerabilitiessize=10000'
    fetch_vulnerabilities = v.get(asset_vulnerability_url, auth=('*********', '***********'), verify=False)

    if fetch_vulnerabilities.status_code == 200:
        # print('API call successful... working...')
        # print(fetch_vulnerabilities.text)
        vuln_json_object = json.dumps(fetch_vulnerabilities.text)
        vuln_dict_object = json.loads(vuln_json_object)
        # print(type(vuln_dict_object))
        vulnerabilities = ast.literal_eval(vuln_dict_object)
        vulnerability = (vulnerabilities['resources'])

        for elem in vulnerability:
            values_view = elem.values()
            value_iterator = iter(values_view)
            first_value = next(value_iterator)
            list_of_vuln.append(first_value)

    return list_of_vuln


def get_vulnerability_info(item):
    # list_of_dict_objects = []

    vulnerability_instance = 'https://nexposeURL:portNumber/api/3/vulnerabilities' + str(item)
    r = requests.Session()
    r.trust_env = False
    fetched_vulnerability = r.get(vulnerability_instance, auth=('**********', '***********'), verify=False)
    # print(fetched_vulnerability.text) # String
    vuln_dict_object = json.loads(fetched_vulnerability.text)

    # print(type(vuln_dict_object)) # Dictionary
    # print('Vulnerability ID ' + vuln_dict_object['id']) # successfully prints
    # print('Title ' + vuln_dict_object['title']) # successfully prints
    # print('Exploits ' + str(vuln_dict_object['exploits'])) # successfully prints
    # print(vuln_dict_object['score'])
    # print('Risk Score ' + str(vuln_dict_object['riskScore'])) # successfully prints
    # print('Severity ' + str(vuln_dict_object['severity'])) # successfully prints
    # print('Date Modified ' + str(vuln_dict_object['modified'])) # successfully prints
    cvss_obj = (vuln_dict_object['cvss'])
    # print(cvss_obj)
    try:
        v2_obj = (cvss_obj['v2'])

    except KeyError:
        v2_obj = None
    if v2_obj is None:
        v2_obj = ''
        # print('CVSS Score ' + v2_obj)
    else:
        v2_obj = v2_obj['score']
        # print('CVSS Score ' + str(v2_obj))

    try:
        v3_obj = (cvss_obj['v3'])

    except KeyError:
        v3_obj = None
    if v3_obj is None:
        v3_obj = ''
        # print('CVSSv3 Score ' + v3_obj)
    else:
        v3_obj = (v3_obj['score'])
        # print('CVSSv3 Score ' + str(v3_obj))
    # print('CVSS Score ' + str(v2_obj))
    # print('CVSSv3 Score ' + str(v3_obj))

    
    new_dict_object = {
        'Vulnerability ID': vuln_dict_object['id'],
        'Title': vuln_dict_object['title'],
        'Malware': vuln_dict_object['malwareKits'],
        'Exploits': str(vuln_dict_object['exploits']),
        'CVSS Score': str(v2_obj),
        'CVSSv3 Score': str(v3_obj),
        'Risk Score': str(vuln_dict_object['riskScore']),
        'Published On': str(vuln_dict_object['published']),
        'Modified On': str(vuln_dict_object['modified']),
        'Severity': str(vuln_dict_object['severity'])
    }
    return new_dict_object


####################### Main Program ################################
if __name__ == '__main__':

    list_of_dict_objects = []

    # windows_servers_np_id = 19
    # aws_prod = 129
    apple = 93
    file_name = 'DTestingApple'
    current_date = datetime.now()
    date_string = current_date + 'strftime(%Y_%m_%d)'

    # Get Assets for Asset Group
    assets_from_asset_group = get_assets_from_assetgroup(apple)
    print(assets_from_asset_group)

    # For Each Asset, get the list of vulnerabilties 
    for each_asset in assets_from_asset_group:
        vulnerabilities_list = get_vulnerabilies_for_each_asset(each_asset)
        print(vulnerabilities_list)
        # For Each Vulnerability get additional context like title, cvss score, severity etc..
        for each_vulnerability in vulnerabilities_list:
            vuln_info_dict = get_vulnerability_info(each_vulnerability)
            print(vuln_info_dict)
            list_of_dict_objects.append(vuln_info_dict)

    # Write the vulnerabilities into a csv file
    with open(file_name + '-vulnerabilities-' + date_string + '.csv', mode='a') as csv_file:
        fieldnames = ['Vulnerability ID', 'Title', 'Malware', 'Exploits', 'CVSS Score', 'CVSSv3 Score', 'Risk Score',
                        'Published On', 'Modified On', 'Severity']
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

        writer.writeheader()
        for dict in list_of_dict_objects:
            print(dict)
            writer.writerow(dict)

